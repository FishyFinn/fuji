package generator;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;
import io.github.sakurawald.config.annotation.Documentation;
import io.github.sakurawald.config.model.ConfigModel;
import io.github.sakurawald.generator.JsonDocsGenerator;
import io.github.sakurawald.generator.MarkdownDocsGenerator;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;

@Slf4j
public class DocsGeneratorTest {

    private StringBuilder processJavaObject(Object obj) {
        StringBuilder sb = new StringBuilder();
        sb.append("""
                # Modules

                > _**This page is generated by program. To get more detailed documentation, read [the runtime-control configuration](https://github.com/sakurawald/fuji-fabric/blob/dev/src/main/java/io/github/sakurawald/config/model/ConfigModel.java)**_
                
                > _**By default, all the modules are disabled.**_
                
                """);

        processFields(sb, obj);
        return sb;
    }

    private void processFields(StringBuilder sb, Object obj) {
        Class<?> clazz = obj.getClass();
        for (Class<?> innerClazz : clazz.getDeclaredClasses()) {
            String name = innerClazz.getSimpleName();

            sb.append("## ").append(name).append(" module");
            if (innerClazz.isAnnotationPresent(Documentation.class)) {
                Documentation annotation = innerClazz.getAnnotation(Documentation.class);
                sb.append("\n").append(annotation.value().trim()).append("\n\n");
            } else {
                sb.append("\n").append("No documentation.").append("\n\n");
            }
        }
    }

    private void writeToFile(String fileName, Object object) {
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        String filePath = "./fuji-fabric.wiki/" + fileName;
        new File(filePath).mkdirs();

        try (FileWriter writer = new FileWriter(filePath)) {
            writer.write(object.toString());
            System.out.println("File " + fileName + " has been written successfully.");
        } catch (IOException e) {
            System.err.println("An error occurred while writing file: " + e.getMessage());
        }
    }

    @Test
    void generate() {

        // config.configJson
        Path githubWikiPath = Path.of("fuji-fabric.wiki");

        JsonObject configJson = JsonDocsGenerator.getInstance().generate(githubWikiPath.resolve("config.json"), new ConfigModel());
        MarkdownDocsGenerator.getInstance().generate(githubWikiPath.resolve("config.md"), configJson);

    }

}
