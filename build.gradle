plugins {
    id 'fabric-loom' version '1.6.+'
    id 'maven-publish'
    id "com.modrinth.minotaur" version "2.+"
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    mavenCentral()
    maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://jitpack.io" }
    maven { url 'https://masa.dy.fi/maven' }
    maven { url 'https://maven.nucleoid.xyz' }
    maven { url 'https://projectlombok.org/edge-releases' }
}

loom {
// fix: adventure mod error in runServer()
//    splitEnvironmentSourceSets()

    accessWidenerPath = file("src/main/resources/fuji.accesswidener")

    mods {
        "fuji" {
            sourceSet sourceSets.main
        }
    }

    runs {
        configureEach {
            vmArgs("-Xms8G -Xmx8G -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -XX:G1NewSizePercent=40 -XX:G1MaxNewSizePercent=50 -XX:G1HeapRegionSize=16M -XX:G1ReservePercent=15 -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:InitiatingHeapOccupancyPercent=15 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1 -XX:+UseLargePages -XX:+UseTransparentHugePages -Duser.timezone=GMT+08".split(" "))
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    compileOnly "org.projectlombok:lombok:${project.lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${project.lombok_version}"
    testCompileOnly "org.projectlombok:lombok:${project.lombok_version}"
    testAnnotationProcessor "org.projectlombok:lombok:${project.lombok_version}"

    implementation group: 'com.google.code.gson', name: 'gson', version: "${project.gson_version}"

    modImplementation("carpet:fabric-carpet:${project.carpet_core_version}")

    include(implementation 'net.luckperms:api:5.4')

    modImplementation include("net.kyori:adventure-platform-fabric:${project.adventure_platform_fabric_version}")
    include(implementation "net.kyori:adventure-text-minimessage:${project.adventure_api_version}")

    modImplementation include("eu.pb4:sgui:${project.sgui_version}")

    implementation "me.lucko:spark-api:${project.spark_version}"

    include(implementation "org.apache.commons:commons-compress:${project.apache_commons_compression_version}")
    include(implementation 'org.apache.commons:commons-rng-simple:1.6')
    include(implementation "commons-io:commons-io:${project.apache_commons_io_version}")
    include(implementation "org.quartz-scheduler:quartz:${project.quartz_version}")
    include(implementation "org.reflections:reflections:${project.reflections_version}")
    include(implementation "org.javassist:javassist:${project.javaassist_version}")

//    implementation("com.google.guava:guava:33.2.1-jre")

    testImplementation(platform('org.junit:junit-bom:5.10.2'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testRuntimeOnly('org.junit.platform:junit-platform-launcher')

    modImplementation(include("eu.pb4:placeholder-api:${project.placeholder_api_version}"))
}

processResources {
    inputs.property "version", project.version
    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release.set(21)
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "${it}-mc${minecraft_version}-${project.base.archivesName.get()}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

// modrinth
modrinth {
    token = "$System.env.MODRINTH_TOKEN"
    projectId = "1TowMm2v"
    versionNumber = "$mod_version"
    versionType = "release"
    uploadFile = remapJar
    gameVersions = ['1.21']
    loaders = ["fabric"]
    dependencies {
        required.project "fabric-api"
        optional.project "luckperms"
        optional.project "carpet"
        optional.project "spark"
    }
    syncBodyFrom = rootProject.file("README.md").text
}
tasks.modrinth.dependsOn(tasks.modrinthSyncBody)

// test framework
test {
    useJUnitPlatform()
    filter {
    }
}

tasks.register('generateDocs') {
    outputs.upToDateWhen { false }
    test {
        filter {
            includeTestsMatching 'DocsGeneratorTest.generate'
        }
    }
}
tasks.modrinthSyncBody.dependsOn(generateDocs)

tasks.register('checkMixinRegistryTest') {
    outputs.upToDateWhen { false }
    test {
        filter {
            includeTestsMatching 'CheckMixinRegistryTest.test'
        }
    }
}
tasks.compileJava.dependsOn(checkMixinRegistryTest)

tasks.register('checkModuleDependencyTest') {
    outputs.upToDateWhen { false }
    test {
        filter {
            includeTestsMatching 'CheckModuleDependencyTest.test'
        }
    }
}
tasks.compileJava.dependsOn(checkModuleDependencyTest)
